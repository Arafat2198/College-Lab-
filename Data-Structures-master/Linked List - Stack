#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define size 5

struct node
{
  int data;
  struct node *next;
};
typedef struct  node *NODE;

NODE get_node()
{
  NODE p;
  p = (NODE)malloc(sizeof(struct node));
  if(p!=NULL) return p;
  else
    {
      printf("\nNo Memory\n");
      return NULL;
    }
}

NODE push(NODE head,int ele,int *len)
{
  NODE p;
  p=get_node();
  p->data=ele;
  p->next=NULL;
  if(*len==size)
    {
      printf("\nStack Overflow\n");
      return head;
    }
  else
    {
      p->next=head;
      head=p;
      printf("\nPUSHED\n");
      (++*len);
      return head;
    }
}

NODE pop(NODE head,int *len)
{ NODE p;
  if(head==NULL)
    {
      printf("\nStack Underflow\n");
      return head;
    }
  else
    {
      p=head;
      head=head->next;
      free(p);
      printf("\nPopped\n");
      (--*len);
      return head;
    }
}

void display(NODE head)
{
  NODE p;
  p=head;
  if(head==NULL)
    {
      printf("\nStack Underflow\n");
    }
  while(p!=NULL)
       {
	 printf("%d\n",p->data);
	 p=p->next;
       }
}


int main() {
	int choice, len = 0, ele;
		NODE head = NULL;
	clrscr();
	do {
		printf("1. Push \n");
		printf("2. Pop \n");
		printf("3. Display \n");
		printf("4. Exit \n");
		printf("Enter Choice \n");
		scanf("%d", &choice);

		switch (choice) {
		    case 1: printf("Enter Element \n");
			    scanf("%d", &ele);
			    head = push(head,ele,&len);
			    break;

		    case 2: head = pop(head, &len);
			    break;

		    case 3: display(head);
			    break;

		    case 4: exit(0);
			    break;

		    default: printf("Invalid Choice \n");
		}

	} while (choice != 4);

	return 0;
}
