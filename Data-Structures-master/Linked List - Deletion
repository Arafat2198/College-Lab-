#include <stdio.h>
#include <stdlib.h>

struct node {
	 int data;
	 struct node *next;
};

typedef struct node * NODE;

NODE getnode() {
	 NODE p;
	 p = (NODE) malloc(sizeof(struct node));
	 if (p != NULL) return p;
	 else {
		  printf("No Memory \n");
		  return NULL;
	 }
}

NODE insert_front(int item, NODE head) {
	 NODE p;
	 clrscr();
	 p = getnode();
	 p -> data = item;
	 p -> next = head;
	 head = p;
	 printf("Inserted \n");
	 return head;
}

void insert_back(int item, NODE head) {
	 NODE p, q;
	 clrscr();
	 q = getnode();
	 q -> data = item;
	 q -> next = NULL;
	 p = head;
	 while (p -> next != NULL) p = p -> next;
	 p -> next = q;
	 printf("Inserted \n");
}


void display (NODE head) {
	 NODE p;
	 clrscr();
	 if (head == NULL) {
		  printf("Empty List \n");
		  return;
	 }
	 p = head;
	 while (p != NULL) {
		  printf("%d \n", p -> data);
		  p = p -> next;
	 }
}


NODE insert_pos(int ele,NODE head,int pos)
{
	 NODE p,prev=NULL,cur;
	 int count=1;
	 clrscr();
	 p = getnode();
	 p->data=ele;
	 p->next=NULL;
	 if(head==NULL)
	    { if(pos==1)
	       { printf("Inserted\n");
		 return p;
	       }
	      else
	       { printf("Invalid Position\n");
	       }
	    }
	 else
	    { while(p!=NULL && count!=pos)
	       {
		 prev=cur;
		 cur=cur->next;
		 count++;
	       }
	      if (count == pos)
	       {
		 prev->next=p;
		 p->next=cur;
		 printf("Inserted\n");
		 return head;
	       }
	      else
	       {
		 printf("Invalid Option\n");
		 return NULL;
	       }

	    }
}


NODE delete_front(NODE head)
{
	 NODE p;
	 clrscr();
	 if(head==NULL)
	   {
	    printf("The List is Empty\n");
	    return head;
	   }
	 else
	   {
	    p=head;
	    head=head->next;
	    free(p);
	    printf("The Element is Deleted\n");
	    return head;
	   }
}


NODE delete_end(NODE head)
{
	 NODE cur,prev=NULL;
	 clrscr();
	 if(head==NULL)
	   {
	    printf("The List is Empty\n");
	    return head;
	   }
	 else
	   {
	     cur=head;
	     while(cur->next!=NULL)
		{
		  prev=cur;
		  cur=cur->next;
		}
	     prev->next=NULL;
	     free(cur);
	     printf("Element Deleted\n");
	     return head;
	   }

}


NODE delete_pos(NODE head,int val)
{
	 NODE cur=head,prev=NULL;
	 int flag=1;
	 clrscr();
	 if(head==NULL)
	   {
	     printf("The List Is empty");
	     return head;
	   }
	 else if(head->data==val)
	   {
	     head=head->next;
	     free(cur);
	     printf("The Element is Deleted\n");
	     return head;
	   }
	 else
	   {   while(cur->next!=NULL)
		 {
		    prev=cur;
		    if(cur->data==val)
		   {
		      prev->next=cur->next;
		      free(cur);
		      printf("Element is Deleted\n");
		      flag=0;
		      return head;
		   }
		   else continue;
		  }

	       if(flag==1)
		 {
		   printf("Element is Not Found\n");
		   return head;
		 }
	 }
     return head;
}

void main()
{
	 int choice, pos, ele,val;
	 char ch;
	 NODE head = NULL;
	 clrscr();

	 do {
		  printf("*******************************************\n");
		  printf("1. Enter from Front \n");
		  printf("2. Enter from End \n");
		  printf("3. Enter from any Position\n");
		  printf("4. Delete from first\n");
		  printf("5. Delete from end\n");
		  printf("6. Delete from position\n");
		  printf("7. Display\n");
		  printf("8. Exit \n");
		  printf("*******************************************\n");
		  printf("\nEnter Choice :");
		  scanf("%d", &choice);

		  switch (choice) {
				case 1: printf("\nEnter Element \n");
						  scanf("%d", &ele);
						  head = insert_front(ele, head);
						  break;

				case 2: printf("\nEnter Element \n");
						  scanf("%d", &ele);
						  insert_back(ele, head);
						  break;

				case 3: printf("\nEnter Element\n");
						  scanf("%d",&ele);
					printf("Enter the position\n");
						  head=insert_pos(ele,head,pos);
						  break;

				case 4: head=delete_front(head);
					break;

				case 5: head=delete_end(head);
					break;
				case 6: printf("Enter the Value to be deleted: ");
					scanf("%d",&val);
					printf("\n");
					head=delete_pos(head,val);
					break;
				case 7: display(head);
						  break;

				case 8: exit(0);
						  break;

				default: printf("\nInvalid Choice \n");
					  clrscr();
						  break;
      }	} while (choice != 5);

}
