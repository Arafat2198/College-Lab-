#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node{
	int data;
	struct node *next;
  struct node *prev;
};
typedef struct node *NODE;
NODE getnode()
{
	NODE p = (NODE)malloc(sizeof(struct node));
	if(p != NULL)
		return p;
	else
	{
   printf("Memory not Allocated!!\n");
   exit(0);
	}
}

NODE insert_front(NODE head,int ele)
{
  NODE p;
  p=getnode();
  p->data=ele;
  p->next=NULL;
  p->prev=NULL;
  if(head==NULL)
  {
    return p;
  }
  else
  {
    p->next=head;
    head->prev=p;
    return p;
  }
  printf("\nInserted\n\n");
}

NODE insert_back(NODE head,int ele)
{
  NODE p,q;
  q=getnode();
  q->data=ele;
  q->next=NULL;
  q->prev=NULL;
  if(head==NULL)
  {
    return p;
  }
  else
  {
    p=head;
    while(p->next!=NULL)
      p=p->next;
    p->next=q;
    q->prev=p;
    return head;
  }
  printf("\nInserted\n\n");
}

NODE insert_pos(NODE head,int pos,int ele)
{
  NODE p,q;
  int count=1;
  q=getnode();
  q->data=ele;
  q->next=NULL;
  q->prev=NULL;
  if(head==NULL)
    {
      if(pos==1)
	{
	  printf("\nInserted\n");
	  return q;
	}
      else
	{
	  printf("\nInvalid position\n");
	  return NULL;
	}
    }
  else
    {
      p=head;
      while(p!=NULL&&pos!=count)
	   {
	     ++count;
	     p=p->next;
	   }
      if (count==pos)
      {
	q->prev=p->prev;
	q->next=p;
	p->prev->next=q;
	p->prev=q;
      }
      else printf("\nInvalid Position\n");
      return head;
    }
}

NODE delete_val(NODE head,int val)
{
   NODE p,temp;
	 p=head;
	 if (head==NULL){
     printf("\nThe List is Empty\n");
	 }
	 if(p->data==val)
	   {
			 head=p->next;
			 temp=p;
			 free(temp);
			 head->prev=NULL;
			 return head;
		 }
	 else{
	       while(p!=NULL)
	       {
					if(p->data==val)
					  {
							temp=p;
							p->prev->next=p->next;
							p->next->prev=p->prev;
							free(p);
							printf("\n\nDeleted\n");
							return head;
						}
				 }
			 }
}
void display (NODE head)
{
	 NODE p;
	 clrscr();
	 if (head == NULL) {
		  printf("Empty List \n");
		  return;
	 }
	 p = head;
	 while (p != NULL) {
		  printf("%d \n", p -> data);
		  p = p -> next;
	 }
}
int main() {
	 int choice, pos, ele;
	 char ch;
	 NODE head = NULL;
	 clrscr();

	 do {
		  printf("1. Enter from Front \n");
		  printf("2. Enter from End \n");
		  printf("3. Enter from any position \n");
			printf("4. Delete by Value\n");
	    printf("5. Display\n");
    	printf("6. exit\n\n");
		  printf("Enter Choice \n");
		  scanf("%d", &choice);

		  switch (choice) {
				case 1: printf("Enter Element \n");
						  scanf("%d", &ele);
						  head = insert_front(head,ele);
						  break;

				case 2: printf("Enter Element \n");
						  scanf("%d", &ele);
						  head=insert_back(head,ele);
						  break;

				case 3: printf("Enter Element\n");
						  scanf("%d",&ele);
					printf("Enter Position\n");
						  scanf("%d",&pos);
						  head=insert_pos(head,pos,ele);
						  break;
				case 5: printf("The List is as follows\n");
						  display(head);
						  break;
				case 4: printf("Enter the Value to be Deleted\n");
				        scanf("%d",&ele);
								head=delete_val(head,ele);
		    case 6: exit(0);
						  break;
				default: printf("Invalid Choice \n");
		  }


	 } while (choice != 5);

	 return 0;
}
